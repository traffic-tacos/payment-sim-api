---
description:
globs:
alwaysApply: true
---
📌 payment-sim-api 애플리케이션 정보 (순수 gRPC 버전)

Traffic Tacos MSA Platform의 **순수 gRPC 결제 시뮬레이션 서비스**입니다.
inventory-api 패턴을 따라 순수 gRPC로 구현되었으며, 중앙화된 proto-contracts 모듈을 사용합니다.

## 현재 구현 상태
- 목적: 예약 시스템의 결제 단계 시뮬레이션(승인/실패/지연/랜덤), EventBridge + Webhook 이중 처리
- 상위 호출자: gateway-api(gRPC), reservation-api(gRPC). 콜백 수신 측: reservation-api webhook + EventBridge
- 요구: 30k RPS 처리 목표, inventory-api와 동일한 순수 gRPC 아키텍처

## 1) 기술 스택(현재 구현)
- Go 1.24+, multi-arch (darwin/linux arm64/amd64)
- gRPC 서버: google.golang.org/grpc + reflection (포트 8030)
- HTTP 서버: net/http (헬스체크 + 메트릭스만, 포트 8031)
- Proto 계약: github.com/traffic-tacos/proto-contracts (중앙화된 모듈)
- AWS 통합: EventBridge + SQS (AWS SDK v2, 프로필: tacos)
- HTTP 클라이언트: net/http(Client) (webhook 발송용)
- 로깅: zap(JSON 구조 로그)
- 관측: Prometheus(client_golang) + health endpoints
- 동시성: goroutine + time.Timer (webhook 지연 처리)
- 상태 저장: in-memory map (프로세스 재시작 시 휘발)

## 2) gRPC 서비스 구현
- 결제 의도 생성 → EventBridge 이벤트 발행 + HTTP webhook 이중 처리
- 시나리오: PAYMENT_SCENARIO_APPROVE|FAIL|DELAY|RANDOM (proto enum)
- 상태: PAYMENT_STATUS_PENDING → COMPLETED|FAILED (proto enum)

## 3) gRPC API 계약 (proto-contracts 모듈 기반)

### 사용 가능한 gRPC 메서드:
- `CreatePaymentIntent` - 결제 인텐트 생성
- `GetPaymentStatus` - 결제 상태 조회
- `ProcessPayment` - 결제 처리
- `CancelPayment` - 결제 취소
- `ListPayments` - 결제 목록 조회
- `SimulateWebhook` - 웹훅 시뮬레이션

### 3.1 CreatePaymentIntent
Request:
{
  "reservation_id": "rsv_123",
  "user_id": "user_456",
  "amount": {"amount": 120000, "currency": "KRW"},
  "scenario": "PAYMENT_SCENARIO_APPROVE",
  "webhook_url": "https://reservation-api.example.com/internal/payment/webhook"
}
Response:
{
  "payment_intent_id": "uuid",
  "status": "PAYMENT_STATUS_PENDING"
}

### 3.2 GetPaymentStatus
Request:
{
  "payment_intent_id": "uuid",
  "user_id": "user_456"
}
Response:
{
  "payment": {
    "payment_intent_id": "uuid",
    "reservation_id": "rsv_123",
    "status": "PAYMENT_STATUS_PENDING|COMPLETED|FAILED",
    "amount": {"amount": "120000", "currency": "KRW"}
  }
}

### 3.2 POST /v1/sim/webhook/test   (운영자/테스트용 수동 발송)
Body:
{ "payment_intent_id":"pay_abc", "type":"payment.approved|payment.failed", "webhook_url":"https://..." }
Response: 202 { "sent": true }

### 3.3 GET /v1/sim/intents/{payment_intent_id}
Response:
{ "payment_intent_id":"pay_abc", "reservation_id":"rsv_123", "status":"PENDING|APPROVED|FAILED", "last_attempt_at":"ISO8601" }

### 3.4 헬스/메트릭
GET /healthz, GET /readyz, GET /metrics (Prometheus)

### 에러 포맷(공통)
{ "error": { "code":"STRING_CODE", "message":"...", "trace_id":"..." } }

## 4) Webhook 사양(송신자=payment-sim-api)
- Method: POST
- Headers:
  - X-Webhook-Id: <uuid>
  - X-Timestamp: <epoch_ms>
  - X-Signature: sha256=<HMAC_HEX>   // body + timestamp로 HMAC, 비밀키는 환경변수
  - Content-Type: application/json
- Body:
{
  "type": "payment.approved|payment.failed",
  "reservation_id": "rsv_123",
  "payment_intent_id": "pay_abc",
  "amount": 120000,
  "ts": "ISO8601",
  "metadata": { "any": "thing" }
}
- 재시도: 수신자 응답이 2xx 아니면 지수 백오프(1s, 2s, 4s, 8s, …) 최대 N회.
- 멱등성: 동일 X-Webhook-Id 재전송 시 페이로드 동일, 서명 동일.
- 타임아웃: 단건 콜백 요청 타임아웃 기본 1s (환경으로 오버라이드).

## 5) 보안/조작 방지
- HMAC 비밀: WEBHOOK_SECRET (env) — X-Signature 생성.
- 재생 방지: X-Timestamp 기준 ±5분 유효(서명 입력에 timestamp 포함).
- 발송 상한: 내부 worker pool + 토큰버킷으로 `WEBHOOK_MAX_RPS` 제한 가능.
- 로깅 마스킹: 서명/비밀 일부 마스킹.

## 6) 성능/동시성/튜닝 목표(앱 레벨)
- 자체 엔드포인트 처리 P95 < 20ms (webhook 전송 제외).
- HTTP 클라이언트 Transport:
  - MaxIdleConns=2000, MaxIdleConnsPerHost=1000, IdleConnTimeout=90s, DisableCompression=false
- 웹훅 발송 워커:
  - 큐(버퍼드 채널) + 워커 N(코어×2~4) + rate limiter(옵션)
  - 실패 시 재시도 큐로 이동(Dead-letter in-memory, 최대 N회)
- 메모리: intent 상태는 인메모리 맵+TTL 또는 경량 임시스토리지(파일/boltdb 옵션화). (지속성 요구 없음)

## 7) 관측/메트릭/로그
- OpenTelemetry: otelhttp 미들웨어로 traceparent 수용/전파, 외부 webhook POST에도 span 생성.
- Prometheus 지표:
  - http_requests_total{route,code}, http_request_duration_seconds_bucket
  - webhook_delivery_total{result="success|failure|timeout"}, webhook_latency_seconds_bucket
  - idempotency_hits_total, scenario_counter_total{scenario}
- zap JSON 로그 필드:
  - ts, level, msg, route, status, latency_ms, payment_intent_id, target_host, attempt, result, trace_id

## 8) 설정(환경변수 - 현재 구현)
- GRPC_PORT=8030 (gRPC 서버 포트)
- AWS_PROFILE=tacos (AWS 프로필, 필수)
- AWS_REGION=ap-northeast-2 (AWS 리전)
- EVENT_BUS_NAME=ticket-reservation-events (EventBridge 버스)
- PAYMENT_EVENT_SOURCE=payment-sim-api (이벤트 소스)
- PAYMENT_WEBHOOK_QUEUE_URL=<SQS URL> (필수)
- WEBHOOK_SECRET=payment-sim-dev-secret (HMAC 키)
- DEFAULT_DELAY_MS=2000 (지연 시간)
- DEFAULT_SCENARIO=approve (기본 시나리오)
- ENVIRONMENT=development|production

## 9) 테스트/품질(코드 중심)
- 단위: 입력 검증, HMAC 서명, 멱등 캐시, 시나리오 분기, 백오프/재시도 로직, rate limiter.
- 통합: 임시 수신 서버(httptest.Server)로 webhook 성공/실패/지연/타임아웃 시나리오 검증.
- 부하: k6/http 또는 vegeta 스크립트 동봉(의도 생성 2k rps, 콜백 1k rps 상한) — 실행은 외부에서.
- 계약: OpenAPI 문서(openapi/payment-sim.yaml) 생성 및 스키마 검증 테스트.

## 10) 리포지토리 구조(애플리케이션만)
- /cmd/payment-sim-api/main.go
- /internal/http/           // 라우터, 핸들러, 미들웨어(otelhttp, request-id)
- /internal/service/        // intent 생성, 스케줄링, 상태관리
- /internal/webhook/        // HMAC 서명, 발송 워커, 재시도/백오프, rate limit
- /internal/observability/  // otel, prometheus, logger
- /internal/config/         // env 파싱, 기본값
- /internal/store/          // 멱등/의도 상태(in-memory TTL, 선택적 인터페이스)
- /openapi/payment-sim.yaml
- /scripts/run_local.sh
- Makefile (lint/test/build), Dockerfile, README.md
- /test/ (unit + integration)

## 11) 에러 코드(고정 문자열)
- 400 VALIDATION_FAILED
- 401 UNAUTHENTICATED  (필요 시)
- 409 IDEMPOTENCY_CONFLICT
- 429 RATE_LIMITED
- 500 WEBHOOK_DISPATCH_ERROR
- 504 WEBHOOK_TIMEOUT

## 현재 구현 상태 (2024년 12월)
✅ **순수 gRPC 서비스**: inventory-api 패턴 완전 적용
✅ **Proto 계약**: github.com/traffic-tacos/proto-contracts 모듈 사용
✅ **EventBridge 통합**: AWS EventBridge + SQS 실제 연동
✅ **Webhook 발송**: HTTP 콜백과 EventBridge 이중 처리
✅ **MSA 표준**: Dockerfile, Makefile, grpcui, Prometheus 완비
✅ **포트 구성**: 8030 (gRPC), 8031 (Health + Metrics)

## 개발/테스트 명령어
```bash
# 빌드 및 실행
make build
./bin/payment-sim-api

# gRPC 테스트
grpcui -plaintext localhost:8030
grpcurl -plaintext localhost:8030 list

# 헬스체크
curl http://localhost:8031/health
```

### 최종 지시
payment-sim-api는 현재 **순수 gRPC 아키텍처**로 완전히 전환되었습니다.
proto-contracts 모듈을 사용하여 MSA 표준을 준수하며, EventBridge + Webhook 이중 처리를 통해 고가용성을 보장합니다.